// <auto-generated />
using DetailsHandbook;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DetailsHandbook.Migrations
{
    [DbContext(typeof(DetailsDbContext))]
    partial class DetailsDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "6.0.4");

            modelBuilder.Entity("Details.AlternateResistor", b =>
                {
                    b.Property<double>("Access")
                        .HasColumnType("REAL");

                    b.Property<string>("Interchangeability")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Manufacturer")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Model")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<double>("Nominal")
                        .HasColumnType("REAL");

                    b.Property<double>("Power")
                        .HasColumnType("REAL");

                    b.Property<double>("Price")
                        .HasColumnType("REAL");

                    b.Property<string>("SpinType")
                        .IsRequired()
                        .HasColumnType("TEXT");
                    b.HasKey("Model");

                    b.ToTable("AlternateResistors");
                });

            modelBuilder.Entity("Details.ConstantResistor", b =>
                {
                    b.Property<double>("Access")
                        .HasColumnType("REAL");

                    b.Property<string>("Interchangeability")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Manufacturer")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Model")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<double>("Nominal")
                        .HasColumnType("REAL");

                    b.Property<double>("Power")
                        .HasColumnType("REAL");

                    b.Property<double>("Price")
                        .HasColumnType("REAL");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("TEXT");
                    b.HasKey("Model");

                    b.ToTable("ConstantResistor");
                });

            modelBuilder.Entity("DetailsLib.AnalogMicrocircuit", b =>
                {
                    b.Property<string>("CaseType")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("FunctionalPurpose")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Interchangeability")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Manufacturer")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Model")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<double>("Price")
                        .HasColumnType("REAL");

                    b.Property<string>("SupplyVoltage")
                        .IsRequired()
                        .HasColumnType("TEXT");
                    b.HasKey("Model");

                    b.ToTable("AnalogMicrocircuits");
                });

            modelBuilder.Entity("DetailsLib.CeramicCapacitor", b =>
                {
                    b.Property<int>("Access")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Interchangeability")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Manufacturer")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Model")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<double>("Nominal")
                        .HasColumnType("REAL");

                    b.Property<double>("Price")
                        .HasColumnType("REAL");

                    b.Property<string>("Tcc")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("WorkingVoltage")
                        .HasColumnType("INTEGER");
                    b.HasKey("Model");

                    b.ToTable("CeramicCapacitors");
                });

            modelBuilder.Entity("DetailsLib.ComputerSystem", b =>
                {
                    b.Property<string>("CaseType")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("FunctionalPurpose")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Interchangeability")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Manufacturer")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Model")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<double>("Price")
                        .HasColumnType("REAL");

                    b.Property<string>("SupplyVoltage")
                        .IsRequired()
                        .HasColumnType("TEXT");
                    b.HasKey("Model");

                    b.ToTable("ComputerSystems");
                });

            modelBuilder.Entity("DetailsLib.ElectrolyticCapacitor", b =>
                {
                    b.Property<int>("Access")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Interchangeability")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Manufacturer")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Model")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<double>("Nominal")
                        .HasColumnType("REAL");

                    b.Property<string>("PlateType")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<double>("Price")
                        .HasColumnType("REAL");

                    b.Property<int>("WorkingVoltage")
                        .HasColumnType("INTEGER");
                    b.HasKey("Model");

                    b.ToTable("ElectrolyticCapacitors");
                });

            modelBuilder.Entity("DetailsLib.HighFreqConnector", b =>
                {
                    b.Property<string>("Interchangeability")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Manufacturer")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("MaxCommVoltage")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Model")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<double>("Price")
                        .HasColumnType("REAL");

                    b.Property<int>("WaveResistance")
                        .HasColumnType("INTEGER");
                    b.HasKey("Model");

                    b.ToTable("HighFreqConnector");
                });

            modelBuilder.Entity("DetailsLib.HighFreqDiode", b =>
                {
                    b.Property<double>("CutoffCurrent")
                        .HasColumnType("REAL");

                    b.Property<int>("CutoffFreq")
                        .HasColumnType("INTEGER");

                    b.Property<int>("CutoffVoltage")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Interchangeability")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Manufacturer")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Model")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<double>("Price")
                        .HasColumnType("REAL");
                    b.HasKey("Model");

                    b.ToTable("HighFreqDiodes");
                });

            modelBuilder.Entity("DetailsLib.Inductance", b =>
                {
                    b.Property<int>("Access")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Interchangeability")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Manufacturer")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Model")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("Nominal")
                        .HasColumnType("INTEGER");

                    b.Property<double>("Price")
                        .HasColumnType("REAL");

                    b.Property<double>("WorkingCurrent")
                        .HasColumnType("REAL");
                    b.HasKey("Model");

                    b.ToTable("Inductances");
                });

            modelBuilder.Entity("DetailsLib.LightDiode", b =>
                {
                    b.Property<double>("CutoffCurrent")
                        .HasColumnType("REAL");

                    b.Property<int>("CutoffVoltage")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Interchangeability")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<double>("LightPower")
                        .HasColumnType("REAL");

                    b.Property<string>("Manufacturer")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Model")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<double>("Price")
                        .HasColumnType("REAL");
                    b.HasKey("Model");

                    b.ToTable("LightDiodes");
                });

            modelBuilder.Entity("DetailsLib.LogicMicrocircuit", b =>
                {
                    b.Property<string>("CaseType")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Interchangeability")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("LogicOrganization")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Manufacturer")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Model")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<double>("Price")
                        .HasColumnType("REAL");

                    b.Property<string>("SupplyVoltage")
                        .IsRequired()
                        .HasColumnType("TEXT");
                    b.HasKey("Model");

                    b.ToTable("LogicMicrocircuits");
                });

            modelBuilder.Entity("DetailsLib.LowFreqConnector", b =>
                {
                    b.Property<string>("ConnectorType")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Interchangeability")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Manufacturer")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("MaxCommVoltage")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Model")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<double>("Price")
                        .HasColumnType("REAL");
                    b.HasKey("Model");

                    b.ToTable("LowFreqConnectors");
                });

            modelBuilder.Entity("DetailsLib.MembraneCapacitor", b =>
                {
                    b.Property<int>("Access")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Interchangeability")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Manufacturer")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Model")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<double>("Nominal")
                        .HasColumnType("REAL");

                    b.Property<string>("PlateType")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<double>("Price")
                        .HasColumnType("REAL");

                    b.Property<int>("WorkingVoltage")
                        .HasColumnType("INTEGER");
                    b.HasKey("Model");

                    b.ToTable("MembraneCapacitors");
                });

            modelBuilder.Entity("DetailsLib.RectifyingDiode", b =>
                {
                    b.Property<double>("CutoffCurrent")
                        .HasColumnType("REAL");

                    b.Property<int>("CutoffVoltage")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Interchangeability")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Manufacturer")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Model")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<double>("Price")
                        .HasColumnType("REAL");

                    b.Property<double>("ReverseCurrent")
                        .HasColumnType("REAL");
                    b.HasKey("Model");

                    b.ToTable("RectifyingDiodes");
                });

            modelBuilder.Entity("DetailsLib.Relay", b =>
                {
                    b.Property<string>("Interchangeability")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Manufacturer")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("MaxCommVoltage")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Model")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<double>("Price")
                        .HasColumnType("REAL");

                    b.Property<int>("WindingWorkVoltage")
                        .HasColumnType("INTEGER");
                    b.HasKey("Model");

                    b.ToTable("Relays");
                });

            modelBuilder.Entity("DetailsLib.Switcher", b =>
                {
                    b.Property<string>("Interchangeability")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Manufacturer")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("MaxCommVoltage")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Model")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<double>("Price")
                        .HasColumnType("REAL");

                    b.Property<string>("SwitchType")
                        .IsRequired()
                        .HasColumnType("TEXT");
                    b.HasKey("Model");

                    b.ToTable("Switchers");
                });

            modelBuilder.Entity("DetailsLib.Thyristor", b =>
                {
                    b.Property<double>("DCurrentInOpenCase")
                        .HasColumnType("REAL");

                    b.Property<int>("DcVoltageInClosedCase")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Interchangeability")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Manufacturer")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Model")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<double>("Price")
                        .HasColumnType("REAL");
                    b.HasKey("Model");

                    b.ToTable("Thyristors");
                });

            modelBuilder.Entity("DetailsLib.Transistor", b =>
                {
                    b.Property<int>("CutoffFreq")
                        .HasColumnType("INTEGER");

                    b.Property<string>("HighOrLowFreq")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Interchangeability")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Manufacturer")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Model")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Power")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<double>("Price")
                        .HasColumnType("REAL");
                        

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("TEXT");
                    b.HasKey("Model");

                    b.ToTable("Transistors");
                });

            modelBuilder.Entity("DetailsLib.ZenerDiode", b =>
                {
                    b.Property<string>("Interchangeability")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Manufacturer")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Model")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<double>("Price")
                        .HasColumnType("REAL");

                    b.Property<int>("StabilizationCurrent")
                        .HasColumnType("INTEGER");

                    b.Property<double>("StabilizationVoltage")
                        .HasColumnType("REAL");
                    b.HasKey("Model");

                    b.ToTable("ZenerDiodes");
                });
#pragma warning restore 612, 618
        }
    }
}
